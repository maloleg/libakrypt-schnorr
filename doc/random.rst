Генерация псевдослучайных последовательностей
=============================================

Выработка псевдослучайных значений востребована при реализации
большого класса криптографических преобразований, в частности,
при генерации ключей и синхропосылок, выработке электронной подписи,
реализации алгоритмических мер защиты ключевой информации и т.п.

Библиотека ``libakrypt`` предоставляет класс генераторов,
которые призваны заменить преобразования, реализованные в стандартных функциях языка Си или C++.
Для генерации псевдослучайных последовательностей необходимо создать
контекст генератора (``struct random``) с использованием одной из перечисленных ниже функций:

.. c:function:: int ak_random_create_lcg( ak_random ctx )

Функция создает линейный конгруэнтный генератор псевдослучайной последовательности.

   :param ctx: Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки

В ходе своей работы такой генератор вырабатывает последовательность внутренних состояний, удовлетворяющую
линейному сравнению

.. math::

   x_{n+1} \equiv a x_{n} + c \mod{2^{64}},

в котором константы a и c удовлетворют равенствам

.. math::

   a = 125643267795740073, \quad c = 506098983240188723.

Далее, последовательность внутренних состояний генератора преобразуется в последовательность
октетов по следующему правилу

.. math::

   \hat x_n \equiv x_n \mod{2^{24}},

   \gamma_n = \displaystyle\frac{x_n - \hat x_n}{2^{24}} \mod{256}.

Если представить внутренее состояние :math:`x_n` как вектор, состоящий из восьми октетов,
то описанное выше преобразование возвращает в качестве значения :math:`\gamma_n` четвертый октет
вектора :math:`x_n`.

Вырабатываемая линейным конгруэнтным генератором
последовательность имеет период, которой в точности равен :math:`2^{64}`,
а каждый октет встречается на периоде одинаковое количество раз.
Не смотря на это, линейный конгруэнтный генератор не рекомендуется использовать для генерации
ключевой информации. Основная область его применения - очистка памяти,
генерация номеров ключей, моделирование пользовательских данных.


.. c:function:: int ak_random_create_nlfsr( ak_random ctx )

Функция создает генератор псевдослучайной последовательности, реализованный при помощи
регистра сдвига с нелинейной обратной связью.

   :param ctx: Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки

.. c:function:: int ak_random_create_hrnd( ak_random ctx )

Функция создает нелинейный генератор псевдослучайной последовательности,
основанный на использовании функции хеширования "Стрибог". Алгоритм выработки такой последовательности
регламентируется Р 1323565.1.006-2017.

   :param ctx: Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки

.. c:function:: int ak_random_create_file( ak_random ctx, const char *name )

Функция создает генератор, считывающий данные из заданного двоичного файла.

   :param ctx:  Контекст генератора
   :param name: Имя файла, из которого считываются данные.
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки


.. c:function:: int ak_random_create_winrtl( ak_random ctx )

Функция создает генератор псевдослучайной последовательности,
использующий механизм генерации, пердоставляемый операционной системой Windows.
В других операционных системах функция недоступна для применения.

   :param ctx: Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки


.. c:function:: int ak_random_create_random( ak_random ctx )

Функция создает генератор псевдослучайной последовательности, считывающий данные
из символьного устройства ``\dev\random``. Данный генератор определен только для unix-систем.
Механизм выработки последовательности определяется используемой версией ядра операционной
системы и может изменяться при переходе от одной версии ядра к другой.

   :param ctx:  Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки


.. c:function:: int ak_random_create_urandom( ak_random ctx )

Функция создает генератор псевдослучайной последовательности, считывающий данные
из символьного устройства ``\dev\urandom``. Данный генератор определен только для unix-систем.

   :param ctx:  Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки



Отметим, что при создании генератора происходит инициализация его внутреннего состояния
некоторым значением, зависящим от текущего состояния системы, на которой выполняется библиотека.
Пользователь также может установить текущее
значение внутреннего состояния генератора с помощью следующей функции.

.. c:function:: int ak_random_randomize( ak_random ctx, const ak_pointer ptr, const ssize_t len )

   Установка внутреннего состояния генератора псевдослучайной последовательности.

   :param ctx: Контекст генератора
   :param ptr: Указатель на область памяти, где содержится значение,
               используемое для инициализации начального состояния
   :param len: Размер области памяти (в октетах)
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки


Для выработки псевдослучайной последовательности заданной длины должна
использоваться следующая функция.

.. c:function:: int ak_random_ptr( ak_random ctx, const ak_pointer ptr, const ssize_t len )

   Выработка псевдослучайной последовательности заданной длины.

   :param ctx: Контекст генератора
   :param ptr: Указатель на область памяти, куда будет помещено выработанное значение
   :param len: Размер области памяти (в октетах)
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки


Для удаления контекста генератора псевдослучайной последовательности
должна использоваться функция

.. c:function:: int ak_random_destroy( ak_random ctx );

   Удаление контекста генератора псевдослучайных последовательностей.

   :param ctx: Контекст генератора
   :return:    В случае успеха функция возвращает ноль, в противном случае возвращается код ошибки

Есть ли очень простой пример использования генератора псевдослучайный чисел?
----------------------------------------------------------------------------

Да, следующий файл (файл ``example-g04n02.c``) содержит очень простой пример генерации
случайных чисел.

.. literalinclude:: ../examples/faq/example-g04n02.c
 :language: c
 :linenos:


Можно ли вырабатывать действительные значения?
----------------------------------------------

Для иллюстрации, ниже приводится простая программа,
использующая генератор псевдослучайных чисел для вычисления константы :math:`\pi` при
помощи метода Монте Карло (файл ``example-g04n01.c``).

.. literalinclude:: ../examples/faq/example-g04n01.c
 :language: c
 :linenos:


Есть ли какие-либо дополнительные функции для работы с генераторами?
--------------------------------------------------------------------

Стоит также отметить две
служебные функции, связанные с использованием генераторов псевдослучайных последовательностей:

 - :func:`int ak_ptr_wipe` - функция заполняет заданную область памяти псевдослучайными значениями,
 - :func:`int ak_file_delete` - функция заполняет заданный файл псевдослучайными значениями, а потом, удаляет файл.

Указанные функции используются, как правило, для удаления чувствительной информации
из памяти программы, а также с физических носителей информации.
